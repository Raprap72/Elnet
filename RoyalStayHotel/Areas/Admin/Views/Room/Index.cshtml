@model IEnumerable<RoyalStayHotel.Models.Room>
@{
    ViewData["Title"] = "Room Management";
    Layout = "_AdminLayout";
    
    var roomTypeInventories = ViewBag.RoomTypeInventories as List<RoyalStayHotel.Models.RoomTypeInventory>;
}

<!-- Add necessary CSS -->
<style>
    .room-type-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: transform 0.3s, box-shadow 0.3s;
        margin-bottom: 1rem;
        background-color: #fff;
    }
    
    .room-type-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
    
    .room-type-header {
        padding: 15px;
        border-radius: 10px 10px 0 0;
        color: white;
    }
    
    .room-type-body {
        padding: 15px;
    }
    
    .room-type-standard { background-color: #3498db; }
    .room-type-deluxe { background-color: #2ecc71; }
    .room-type-deluxesuite { background-color: #9b59b6; }
    .room-type-executivedeluxe { background-color: #e67e22; }
    .room-type-presidential { background-color: #e74c3c; }
    
    .chart-container {
        height: 300px;
        margin-bottom: 1.5rem;
    }
    
    .edit-room-type-btn {
        border-radius: 50%;
        width: 32px;
        height: 32px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .inventory-table th, .inventory-table td {
        vertical-align: middle;
    }
    
    .status-badge {
        font-size: 0.85rem;
        padding: 0.35rem 0.65rem;
        border-radius: 0.25rem;
    }
    
    .table-hover tbody tr {
        transition: background-color 0.2s;
    }
    
    .table-hover tbody tr:hover {
        background-color: rgba(0,0,0,.05);
    }
    
    .action-btn {
        padding: 0.25rem 0.5rem;
        margin-right: 0.25rem;
        transition: transform 0.15s, background-color 0.2s;
        border-radius: 0.25rem;
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        opacity: 0.9;
    }
    
    .action-btn i {
        font-size: 0.9rem;
    }
    
    /* Fix for buttons appearing too close together */
    .btn-group .action-btn {
        margin: 0 2px;
    }
    
    /* Error styling for buttons */
    .btn-error {
        border: 1px solid #e74a3b;
        color: #e74a3b;
    }
</style>

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Room Management</h1>
    <div>
        <a href="@Url.Action("Create", "Room", new { area = "Admin" })" class="btn btn-primary btn-sm shadow-sm mr-2" id="addNewRoomBtn" title="Add a new room to inventory">
            <i class="fas fa-plus fa-sm text-white-50 mr-1"></i> Add New Room
        </a>
        <button type="button" class="btn btn-info btn-sm shadow-sm" data-toggle="modal" data-target="#roomTypeModal" id="manageRoomTypesBtn" title="Manage room type inventory">
            <i class="fas fa-layer-group fa-sm text-white-50 mr-1"></i> Manage Room Types
        </button>
    </div>
</div>

<!-- Content Row -->
<div class="row">
    <!-- Room Type Inventory Chart -->
    <div class="col-xl-7 col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Room Type Distribution</h6>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="roomTypeChart"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Room Status Overview -->
    <div class="col-xl-5 col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Room Status Overview</h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered inventory-table mb-0">
                        <thead>
                            <tr>
                                <th>Room Type</th>
                                <th>Total</th>
                                <th>Available</th>
                                <th>Occupied</th>
                                <th>Availability</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var inventory in roomTypeInventories)
                            {
                                var occupiedRooms = inventory.TotalRooms - inventory.AvailableRooms;
                                var availabilityRate = inventory.TotalRooms > 0 
                                    ? (decimal)inventory.AvailableRooms / inventory.TotalRooms * 100
                                    : 0;
                                
                                <tr>
                                    <td>@inventory.RoomType</td>
                                    <td>@inventory.TotalRooms</td>
                                    <td>@inventory.AvailableRooms</td>
                                    <td>@occupiedRooms</td>
                                    <td>
                                        <div class="progress">
                                            <div class="progress-bar @(availabilityRate > 60 ? "bg-success" : availabilityRate > 30 ? "bg-warning" : "bg-danger")" 
                                                role="progressbar" style="width: @availabilityRate%;" 
                                                aria-valuenow="@availabilityRate" aria-valuemin="0" aria-valuemax="100">
                                                @availabilityRate.ToString("0.0")%
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Room List</h6>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            @if (Model.Any())
            {
                <table class="table table-bordered table-hover dataTable" id="dataTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Room #</th>
                            <th>Type</th>
                            <th>Price</th>
                            <th>Capacity</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.RoomNumber)</td>
                                <td>@Html.DisplayFor(modelItem => item.RoomType)</td>
                                <td>â‚±@Html.DisplayFor(modelItem => item.PricePerNight)</td>
                                <td>@Html.DisplayFor(modelItem => item.MaxGuests)</td>
                                <td>
                                    @if (item.IsAvailable)
                                    {
                                        <span class="badge badge-success status-badge">Available</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-danger status-badge">Occupied</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("Edit", "Room", new { area = "Admin", id = item.RoomId })" 
                                           class="btn btn-sm btn-primary action-btn" 
                                           id="edit-room-@item.RoomId" 
                                           title="Edit Room">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a href="@Url.Action("Details", "Room", new { area = "Admin", id = item.RoomId })" 
                                           class="btn btn-sm btn-info action-btn" 
                                           id="details-room-@item.RoomId" 
                                           title="View Details">
                                            <i class="fas fa-info-circle"></i>
                                        </a>
                                        <a href="@Url.Action("Delete", "Room", new { area = "Admin", id = item.RoomId })" 
                                           class="btn btn-sm btn-danger action-btn" 
                                           id="delete-room-@item.RoomId" 
                                           title="Delete Room">
                                            <i class="fas fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="text-center py-5">
                    <img src="~/img/empty-rooms.svg" alt="No rooms" style="max-width: 200px; opacity: 0.5" class="mb-3" />
                    <h5 class="text-gray-500 font-weight-light">No rooms available</h5>
                    <p class="text-gray-500">Start by adding a new room to your inventory.</p>
                    <a href="@Url.Action("Create", "Room", new { area = "Admin" })" class="btn btn-primary btn-sm mt-2">
                        <i class="fas fa-plus mr-1"></i> Add New Room
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Room Type Management Modal -->
<div class="modal fade" id="roomTypeModal" tabindex="-1" role="dialog" aria-labelledby="roomTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="roomTypeModalLabel">Room Type Management</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle mr-1"></i> Adjust the total number of rooms for each room type. 
                    New rooms will be automatically created, and available rooms can be removed if needed.
                </div>
                
                <div class="table-responsive">
                    <table class="table table-bordered" id="roomTypeTable">
                        <thead>
                            <tr>
                                <th>Room Type</th>
                                <th>Description</th>
                                <th>Total Rooms</th>
                                <th>Available</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var inventory in roomTypeInventories)
                            {
                                var occupiedRooms = inventory.TotalRooms - inventory.AvailableRooms;
                                
                                <tr>
                                    <td>@inventory.RoomType</td>
                                    <td>@inventory.Description</td>
                                    <td>@inventory.TotalRooms</td>
                                    <td>
                                        <span class="badge @(inventory.AvailableRooms > 0 ? "badge-success" : "badge-danger")">
                                            @inventory.AvailableRooms 
                                            <small>(@(inventory.TotalRooms > 0 ? (inventory.AvailableRooms * 100 / inventory.TotalRooms).ToString("0") : "0")%)</small>
                                        </span>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-primary btn-sm edit-inventory-btn" 
                                            data-id="@inventory.Id" 
                                            data-roomtype="@inventory.RoomType" 
                                            data-total="@inventory.TotalRooms"
                                            data-description="@inventory.Description"
                                            data-occupied="@occupiedRooms">
                                            <i class="fas fa-edit"></i> Adjust
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div id="editInventoryForm" style="display: none;" class="mt-4">
                    <h6 class="font-weight-bold">Edit Room Type: <span id="editRoomTypeName"></span></h6>
                    <form id="updateInventoryForm">
                        <input type="hidden" id="inventoryId" name="inventoryId" />
                        <div class="form-group">
                            <label for="totalRooms">Total Rooms:</label>
                            <input type="number" class="form-control" id="totalRooms" name="totalRooms" min="0" required />
                            <small class="text-danger" id="totalRoomsWarning" style="display: none;">
                                <i class="fas fa-exclamation-triangle"></i> 
                                Reducing this number below <span id="occupiedRoomsCount"></span> will remove available rooms only.
                            </small>
                        </div>
                        <div class="form-group">
                            <label for="description">Description:</label>
                            <textarea class="form-control" id="description" name="description" rows="2"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Update Room Type</button>
                        <button type="button" class="btn btn-secondary" id="cancelEditBtn">Cancel</button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Add chart.js for room type visualization -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize tooltips
            $('[title]').tooltip();
            
            // Add error handling for buttons
            $('.action-btn').on('click', function(e) {
                var href = $(this).attr('href');
                if (!href || href === '#' || href === 'javascript:void(0)') {
                    e.preventDefault();
                    $(this).addClass('btn-error');
                    console.error('Invalid URL for button: ' + $(this).attr('id'));
                    alert('Error: This action is currently unavailable. Please try again later.');
                }
            });
            
            // DataTable initialization
            if ($.fn.DataTable) {
                $('#dataTable').DataTable({
                    "order": [[0, "asc"]]
                });
            }
            
            // Room Type Chart
            const roomTypes = @Html.Raw(Json.Serialize(roomTypeInventories.Select(i => i.RoomType.ToString())));
            const totalRooms = @Html.Raw(Json.Serialize(roomTypeInventories.Select(i => i.TotalRooms)));
            const availableRooms = @Html.Raw(Json.Serialize(roomTypeInventories.Select(i => i.AvailableRooms)));
            const occupiedRooms = @Html.Raw(Json.Serialize(roomTypeInventories.Select(i => i.TotalRooms - i.AvailableRooms)));
            
            const ctx = document.getElementById('roomTypeChart').getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: roomTypes,
                    datasets: [
                        {
                            label: 'Available',
                            data: availableRooms,
                            backgroundColor: 'rgba(46, 204, 113, 0.7)',
                            borderColor: 'rgba(46, 204, 113, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Occupied',
                            data: occupiedRooms,
                            backgroundColor: 'rgba(231, 76, 60, 0.7)',
                            borderColor: 'rgba(231, 76, 60, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            stacked: true,
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            precision: 0
                        }
                    }
                }
            });
            
            // Room Type Inventory Management
            $('.edit-inventory-btn').click(function() {
                const id = $(this).data('id');
                const roomType = $(this).data('roomtype');
                const total = $(this).data('total');
                const description = $(this).data('description');
                const occupied = $(this).data('occupied');
                
                $('#inventoryId').val(id);
                $('#totalRooms').val(total);
                $('#description').val(description);
                $('#editRoomTypeName').text(roomType);
                $('#occupiedRoomsCount').text(occupied);
                
                // Show warning if there are occupied rooms
                if (occupied > 0) {
                    $('#totalRooms').attr('min', occupied);
                    $('#totalRoomsWarning').show();
                } else {
                    $('#totalRooms').attr('min', 0);
                    $('#totalRoomsWarning').hide();
                }
                
                $('#editInventoryForm').show();
            });
            
            $('#cancelEditBtn').click(function() {
                $('#editInventoryForm').hide();
            });
            
            $('#updateInventoryForm').submit(function(e) {
                e.preventDefault();
                
                const id = $('#inventoryId').val();
                const totalRooms = $('#totalRooms').val();
                const description = $('#description').val();
                
                $.ajax({
                    url: '/Admin/Room/UpdateRoomTypeInventory',
                    type: 'POST',
                    data: {
                        id: id,
                        totalRooms: totalRooms,
                        description: description,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(result) {
                        if (result.success) {
                            // Show success message
                            alert('Room type inventory updated successfully!');
                            // Reload the page to show updated inventory
                            location.reload();
                        } else {
                            alert('Error: ' + result.message);
                        }
                    },
                    error: function() {
                        alert('An error occurred while updating room type inventory.');
                    }
                });
            });
        });
    </script>
} 